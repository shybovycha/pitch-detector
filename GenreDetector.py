# -*- coding: utf-8 -*-
import numpy as np
from pybrain.tools.shortcuts import buildNetwork
from pybrain.structure import TanhLayer
from pybrain.datasets import SupervisedDataSet
from pybrain.supervised.trainers import BackpropTrainer


X = np.array([
    # crosses
    [0, 1, 0, 0, 1,
     0, 0, 1, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     1, 0, 0, 0, 1],

    [0, 0, 0, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 0, 0, 0],

    [0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 0, 0, 0,
     0, 0, 0, 0, 0],

    [0, 0, 1, 0, 1,
     0, 0, 0, 1, 0,
     0, 0, 1, 0, 1,
     0, 0, 0, 0, 0,
     0, 0, 0, 0, 0],

    [0, 0, 0, 0, 0,
     0, 0, 1, 0, 1,
     0, 0, 0, 1, 0,
     0, 0, 1, 0, 1,
     0, 0, 0, 0, 0],

    [0, 0, 0, 0, 0,
     0, 0, 0, 0, 0,
     0, 0, 1, 0, 1,
     0, 0, 0, 1, 0,
     0, 0, 1, 0, 1],

    [0, 0, 0, 0, 0,
     0, 0, 0, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0],

    [0, 0, 0, 0, 0,
     0, 0, 0, 0, 0,
     1, 0, 1, 0, 0,
     0, 1, 0, 0, 0,
     1, 0, 1, 0, 0],

    [0, 0, 0, 0, 0,
     1, 0, 1, 0, 0,
     0, 1, 0, 0, 0,
     1, 0, 1, 0, 0,
     0, 0, 0, 0, 0],

    [0, 0, 0, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     0, 0, 0, 0, 0],

    [1, 0, 1, 0, 0,
     0, 1, 0, 0, 0,
     1, 0, 1, 0, 0,
     0, 0, 0, 0, 0,
     0, 0, 0, 0, 0],

    [1, 0, 0, 0, 1,
     0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     1, 0, 0, 0, 1],

    # rectangle

    [1, 1, 1, 1, 1,
     1, 0, 0, 0, 1,
     1, 0, 0, 0, 1,
     1, 0, 0, 0, 1,
     1, 1, 1, 1, 1],

    # triangles

    [0, 0, 1, 0, 0,
     0, 1, 0, 1, 0,
     1, 1, 1, 1, 1,
     0, 0, 0, 0, 0,
     0, 0, 0, 0, 0],

    [0, 0, 0, 0, 1,
     0, 0, 0, 1, 1,
     0, 0, 1, 0, 1,
     0, 1, 0, 0, 1,
     1, 1, 1, 1, 1],

    [1, 0, 0, 0, 0,
     1, 1, 0, 0, 0,
     1, 0, 1, 0, 0,
     1, 0, 0, 1, 0,
     1, 1, 1, 1, 1],

    [1, 1, 1, 1, 1,
     0, 1, 0, 1, 0,
     0, 0, 1, 0, 0,
     0, 0, 0, 0, 0,
     0, 0, 0, 0, 0],

    [1, 0, 0, 0, 0,
     1, 1, 0, 0, 0,
     1, 0, 1, 0, 0,
     1, 1, 0, 0, 0,
     1, 0, 0, 0, 0],

    [0, 0, 0, 0, 1,
     0, 0, 0, 1, 1,
     0, 0, 1, 0, 1,
     0, 0, 0, 1, 1,
     0, 0, 0, 0, 1],

    [0, 0, 0, 0, 1,
     0, 0, 0, 1, 1,
     0, 0, 1, 0, 1,
     0, 1, 1, 1, 1,
     0, 0, 0, 0, 0],

    [0, 0, 0, 0, 0,
     0, 0, 0, 0, 1,
     0, 0, 0, 1, 1,
     0, 0, 1, 0, 1,
     0, 1, 1, 1, 1],

    [0, 0, 0, 0, 0,
     0, 0, 0, 1, 0,
     0, 0, 1, 1, 0,
     0, 1, 0, 1, 0,
     1, 1, 1, 1, 0],

    [0, 0, 0, 0, 0,
     1, 0, 0, 0, 0,
     1, 1, 0, 0, 0,
     1, 0, 1, 0, 0,
     1, 1, 1, 1, 0],

    [0, 0, 0, 0, 0,
     0, 1, 0, 0, 0,
     0, 1, 1, 0, 0,
     0, 1, 0, 1, 0,
     0, 1, 1, 1, 1]])

Y = np.array([[1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)
              [1, 0, 0],  # cross (X)

              [0, 1, 0],  # square

              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1],  # triangle
              [0, 0, 1]])  # triangle

print "Building network..."

net = buildNetwork(25, 8, 3, hiddenclass=TanhLayer)

ds = SupervisedDataSet(25, 3)

for i in range(len(Y)):
    ds.addSample(X[i], Y[i])

trainer = BackpropTrainer(net, ds)

print "Training network..."

trainer.trainEpochs(15000)

print "Testing:"

X1 = np.array([[0, 0, 0, 1, 0,
                0, 0, 1, 1, 0,
                0, 1, 0, 1, 0,
                1, 1, 1, 1, 0,
                0, 0, 0, 0, 0]])

print net.activate(X1[0])
